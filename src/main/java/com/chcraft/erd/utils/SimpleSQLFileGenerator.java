package com.chcraft.erd.utils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.chcraft.erd.Entity;
import com.chcraft.erd.Field;
import com.chcraft.erd.FieldOption;
import com.chcraft.erd.Relationship;
import com.chcraft.erd.Relationship.Relation;
import com.chcraft.util.TokenChanger;

public class SimpleSQLFileGenerator implements SQLFileGenerator {
	private final static String ENTITY_TEMPLATE = "-- generated by SimpleSQLFileGenerator\n"
												+"CREATE TABLE `[ENTITYNAME]` (\n"
												+"[FIELD]\n"
												+");\n";

	private final static String ONE_TO_MANY_TEMPLATE = "-- generated by SimpleSQLFileGenerator\n"
												+ "ALTER TABLE `[ENTITY_NAME]` ADD COLUMN\n"
												+ "`[OTHER_NAME]_[OTHER_PK_NAME]` [OTHER_PK_TYPE] NOT NULL, \n"
												+ "ADD CONSTRAINT `fk_[ENTITY_NAME]_has_[OTHER_NAME]_[OTHER_PK_NAME]`\n"
												+ "FOREIGN KEY ([OTHER_NAME]_[OTHER_PK_NAME])\n"
												+ "REFERENCES `[OTHER_NAME]`([OTHER_PK_NAME]);\n";

	private final static String MANY_TO_MANY_TEMPLATE = "-- generated by SimpleSQLFileGenerator\n"
													+ "CREATE TABLE `[ENTITY_NAME]_[OTHER_NAME]` (\n"
													+ "`[ENTITY_NAME]_[ENTITY_PK_NAME]` [ENTITY_PK_TYPE] NOT NULL,\n"
													+ "`[OTHER_NAME]_[OTHER_PK_NAME]` [OTHER_PK_TYPE] NOT NULL,\n"
													+ "PRIMARY KEY (`[ENTITY_NAME]_[ENTITY_PK_NAME]`, `[OTHER_NAME]_[OTHER_PK_NAME]`),\n"
													+ "CONSTRAINT `fk_[ENTITY_NAME]_[OTHER_NAME]_[ENTITY_NAME]_[ENTITY_PK_NAME]`\n"
													+ "FOREIGN KEY (`[ENTITY_NAME]_[ENTITY_PK_NAME]`)\n"
													+ "REFERENCES `[ENTITY_NAME]`([ENTITY_PK_NAME]),\n"
													+ "CONSTRAINT `fk_[ENTITY_NAME]_[OTHER_NAME]_[OTHER_NAME]_[OTHER_PK_NAME]`\n"
													+ "FOREIGN KEY (`[OTHER_NAME]_[OTHER_PK_NAME]`)\n"
													+ "REFERENCES `[OTHER_NAME]`([OTHER_PK_NAME])\n"
													+ ");\n";

	@Override
	public String generateFileString(List<Entity> entities, List<Relationship> relationships) {
		StringBuilder sb = new StringBuilder();

		int entitySize = entities.size();
		for(int i = 0; i < entitySize; i++) {
			Entity entity = entities.get(i);
			sb.append(generateEntity(entity));
			sb.append('\n');
		}

		int relationshipSize = relationships.size();
		for(int i = 0; i < relationshipSize; i++) {
			Relationship relationship = relationships.get(i);
			sb.append(generateRelationship(relationship));
			sb.append('\n');
		}

		return sb.toString();
	}

	@Override
	public String generateEntity(Entity entity) {
		String fields = generateFields(entity.getFields());

		Map<String, String> tokenReplacement = new HashMap<String, String>();
		tokenReplacement.put("[ENTITYNAME]", entity.getName());
		tokenReplacement.put("[FIELD]", fields);

		String result = TokenChanger.replaceToken(ENTITY_TEMPLATE, tokenReplacement);

		return result;
	}

	private String generateFields(List<Field> fields) {
		StringBuilder sb = new StringBuilder();

		int size = fields.size();
		for(int i = 0; i < size; i++) {
			Field field = fields.get(i);
			sb.append(generateField(field));
			if(i < size - 1) {
				sb.append(",\n");
			}
		}

		return sb.toString();
	}

	private String generateField(Field field) {
		StringBuilder sb = new StringBuilder();

		sb.append('`');
		sb.append(field.getName());
		sb.append('`');
		sb.append(' ');
		sb.append(field.getType());

		List<FieldOption> options = field.getOptions();
		if(!options.isEmpty()) {
			for(FieldOption option : options) {
				sb.append(' ');
				sb.append(option.initialToOrigin());
			}
		}

		return sb.toString();
	}

	@Override
	public String generateRelationship(Relationship relationship) {
		String result;
		Map<String, String> tokenReplacement = new HashMap<String, String>();

		//CASE: ONE_TO_ONE
		if(relationship.getRelation() == Relation.ONE_TO_ONE) {
			StringBuilder sb = new StringBuilder();
			tokenReplacement.put("[ENTITY_NAME]", relationship.getEntity().getName());
			tokenReplacement.put("[OTHER_NAME]", relationship.getOther().getName());
			tokenReplacement.put("[OTHER_PK_NAME]", relationship.getOther().getPrimaryKey().getName());
			tokenReplacement.put("[OTHER_PK_TYPE]", relationship.getOther().getPrimaryKey().getType());
			sb.append(TokenChanger.replaceToken(ONE_TO_MANY_TEMPLATE, tokenReplacement));
			sb.append('\n');

			tokenReplacement = new HashMap<String, String>();
			tokenReplacement.put("[ENTITY_NAME]", relationship.getOther().getName());
			tokenReplacement.put("[OTHER_NAME]", relationship.getEntity().getName());
			tokenReplacement.put("[OTHER_PK_NAME]", relationship.getEntity().getPrimaryKey().getName());
			tokenReplacement.put("[OTHER_PK_TYPE]", relationship.getEntity().getPrimaryKey().getType());
			sb.append(TokenChanger.replaceToken(ONE_TO_MANY_TEMPLATE, tokenReplacement));

			return sb.toString();
		}

		//CASE: ONE_TO_MANY
		if(relationship.getRelation() == Relation.ONE_TO_MANY) {
			tokenReplacement.put("[ENTITY_NAME]", relationship.getEntity().getName());
			tokenReplacement.put("[OTHER_NAME]", relationship.getOther().getName());
			tokenReplacement.put("[OTHER_PK_NAME]", relationship.getOther().getPrimaryKey().getName());
			tokenReplacement.put("[OTHER_PK_TYPE]", relationship.getOther().getPrimaryKey().getType());
			result = TokenChanger.replaceToken(ONE_TO_MANY_TEMPLATE, tokenReplacement);

			return result;
		}

		//CASE: MANY_TO_MANY
		if(relationship.getRelation() == Relation.MANY_TO_MANY) {
			tokenReplacement.put("[ENTITY_NAME]", relationship.getEntity().getName());
			tokenReplacement.put("[ENTITY_PK_NAME]", relationship.getEntity().getPrimaryKey().getName());
			tokenReplacement.put("[ENTITY_PK_TYPE]", relationship.getEntity().getPrimaryKey().getType());
			tokenReplacement.put("[OTHER_NAME]", relationship.getOther().getName());
			tokenReplacement.put("[OTHER_PK_NAME]", relationship.getOther().getPrimaryKey().getName());
			tokenReplacement.put("[OTHER_PK_TYPE]", relationship.getOther().getPrimaryKey().getType());
			result = TokenChanger.replaceToken(MANY_TO_MANY_TEMPLATE, tokenReplacement);

			return result;
		}

		return "";
	}
}
