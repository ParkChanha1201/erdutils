package com.chcraft.erd.utils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.chcraft.erd.Entity;
import com.chcraft.erd.Field;
import com.chcraft.erd.FieldOption;
import com.chcraft.erd.Relationship;
import com.chcraft.util.TokenChanger;

public class SimpleSQLFileGenerator implements SQLFileGenerator {
	private final static String ENTITY_TEMPLATE = "-- generated by SimpleSQLFileGenerator\n"
												+"CREATE TABLE `[ENTITYNAME]` (\n"
												+"[FIELD]\n"
												+");\n";
	private final static String RELATIONSHIP_TEMPLATE = "-- generated by SimpleSQLFileGenerator";

	/* -One To Many
	 * ALTER TABLE `[ORIGIN_NAME]` ADD COLUMN
	 * [FOREIGN_NAME]_[FOREIGN_PRIMARY_KEY_NAME] [FOREIGN_PRIMARY_KEY_DATATYPE], ADD
	 * FOREIGN KEY ([FOREIGN_NAME]_[FOREIGN_PRIMARY_KEY_NAME]) REFERENCES
	 * `[FOREIGN_NAME]`([FOREIGN_PRIMARY_KEY_NAME]);
	 */
	@Override
	public String generateFile(List<Entity> entities, List<Relationship> relationships) {
		StringBuilder sb = new StringBuilder();

		int entitySize = entities.size();
		for(int i = 0; i < entitySize; i++) {
			Entity entity = entities.get(i);
			sb.append(generateEntity(entity));
			sb.append('\n');
		}

		int relationshipSize = relationships.size();
		for(int i = 0; i < relationshipSize; i++) {
			Relationship relationship = relationships.get(i);
			sb.append(relationship);
			sb.append('\n');
		}

		return sb.toString();
	}

	@Override
	public String generateEntity(Entity entity) {
		String fields = generateFields(entity.getFields());

		Map<String, String> tokenReplacement = new HashMap<String, String>();
		tokenReplacement.put("[ENTITYNAME]", entity.getName());
		tokenReplacement.put("[FIELD]", fields);

		String result = TokenChanger.replaceToken(ENTITY_TEMPLATE, tokenReplacement);

		return result;
	}

	private String generateFields(List<Field> fields) {
		StringBuilder sb = new StringBuilder();

		int size = fields.size();
		for(int i = 0; i < size; i++) {
			Field field = fields.get(i);
			sb.append(generateField(field));
			if(i < size - 1) {
				sb.append(",\n");
			}
		}

		return sb.toString();
	}

	private String generateField(Field field) {
		StringBuilder sb = new StringBuilder();

		sb.append(field.getName());
		sb.append(' ');
		sb.append(field.getType());

		List<FieldOption> options = field.getOptions();
		if(!options.isEmpty()) {
			for(FieldOption option : options) {
				sb.append(' ');
				sb.append(option.initialToOrigin());
			}
		}

		return sb.toString();
	}

	@Override
	public String generateRelationship(Relationship relationship) {
		Map<String, String> tokenReplacement = new HashMap<String, String>();

		String result = TokenChanger.replaceToken(ENTITY_TEMPLATE, tokenReplacement);

		return result;
	}
}
